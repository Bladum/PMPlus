import pytest
from engine.battle.support.damage_model import TDamageModel

class TestTDamageModel:
    def test_class_exists(self):
        model = TDamageModel()
        assert isinstance(model, TDamageModel)
TBattleEffect:
  description: Special effect for battle map tiles/units (e.g. smoke, fire, panic, sanity).
  constructor:
    pid:
      type: str
      description: Effect identifier (unique string for the effect).
    data:
      type: dict
      description: Dictionary with effect properties (name, description, icon).
TBattleActions:
  description: Handles unit actions during battle (move, crouch, use item, cover, throw, overwatch, suppression, rest).
  constructor: {}

BattleLoot:
  description: Handles post-battle report generation, including loot, score, captures, experience, sanity, ammo, medals, etc.
  methods:
    generate:
      description: Generate a post-battle report summarizing score, loot, captures, experience, sanity, ammo, and medals.
      args:
        battle:
          type: Battle
          description: Battle object containing all relevant data.
      returns:
        type: dict
        description: Report with keys 'score', 'loot', 'captures', 'experience', 'sanity', 'ammo', 'medals'.

BattleLOS:
  description: Static line-of-sight (LOS) calculation for battle map tiles using Bresenham's algorithm.
  methods:
    has_los:
      description: Determine if there is line of sight (LOS) between two points on the battle map.
      args:
        battle:
          type: Battle
          description: Battle object containing map tiles.
        start:
          type: tuple
          description: (x, y) start coordinates.
        end:
          type: tuple
          description: (x, y) end coordinates.
        max_range:
          type: int
          description: Maximum LOS range (default 22).
      returns:
        type: bool
        description: True if LOS exists, False otherwise.

BattlePathfinder:
  description: Static pathfinding for battle map tiles using A* algorithm and tile walkability.
  methods:
    find_path:
      description: Find a path from start to end on the battle map using the A* algorithm.
      args:
        battle:
          type: Battle
          description: Battle object containing map tiles.
        start:
          type: tuple
          description: (x, y) start coordinates.
        end:
          type: tuple
          description: (x, y) end coordinates.
        unit_size:
          type: int
          description: Size of the unit (default 1).
      returns:
        type: list
        description: List of (x, y) tuples representing the path, or empty list if no path found.

TDamageModel:
  description: Handles damage calculation for weapons, explosions, and other sources. Implements armor penetration, critical hits, and damage types. Manages damage distribution to different body parts.
  constructor: {}

TReactionFire:
  description: Handles reaction fire mechanics in battle.
  constructor: {}

# --- Battle Map Generation Classes ---

TMapBlock:
  description: |
    Represents a block of the battle map (e.g., 15x15 or larger). Each TMapBlock is a 2D array of TBattleTile objects, loaded from a TMX file, and can be rendered to PNG for debugging. Used for assembling the battle map from modular blocks.
  constructor:
    size:
      type: int
      description: Size of the block (e.g., 15 for 15x15). Default is 15.

TBattleTile:
  description: |
    Represents a single tile in the battle map. Each tile contains information about its floor, wall, roof, objects, and unit. Provides methods for copying, updating, and applying damage to tiles.
  constructor:
    floor_id:
      type: str
      description: ID of the floor tile (default '0').
    wall_id:
      type: str | None
      description: ID of the wall tile (optional).
    roof_id:
      type: str | None
      description: ID of the roof tile (optional).
  attributes:
    floor:
      type: TBattleFloor
      description: The floor component of the tile.
    wall:
      type: TBattleWall | None
      description: The wall component of the tile.
    roof:
      type: TBattleRoof | None
      description: The roof component of the tile.
    objects:
      type: list[TBattleObject]
      description: List of objects on this tile.
    unit:
      type: TUnit | None
      description: Unit currently on this tile.
    smoke:
      type: bool
      description: Whether the tile contains smoke.
    fire:
      type: bool
      description: Whether the tile contains fire.
    gas:
      type: bool
      description: Whether the tile contains gas.
    light_level:
      type: int
      description: Light level on this tile.
    fog_of_war:
      type: list
      description: Fog of war state for this tile.
    floor_id:
      type: str
      description: ID of the floor tile.
    wall_id:
      type: str | None
      description: ID of the wall tile.
    roof_id:
      type: str | None
      description: ID of the roof tile.
    passable:
      type: bool
      description: Whether the tile can be walked on.
    blocks_fire:
      type: bool
      description: Whether the tile blocks fire.
    blocks_sight:
      type: bool
      description: Whether the tile blocks line of sight.
    blocks_light:
      type: bool
      description: Whether the tile blocks light.
    metadata:
      type: dict
      description: Additional metadata for the tile.
  methods:
    copy:
      description: Create a deep copy of this tile.
      returns:
        type: TBattleTile
        description: A new TBattleTile with the same properties.
    update_properties:
      description: Update tile properties based on layer IDs.
    has_floor:
      description: Check if this tile has a floor.
      returns:
        type: bool
    has_wall:
      description: Check if this tile has a wall.
      returns:
        type: bool
    has_roof:
      description: Check if this tile has a roof.
      returns:
        type: bool
    is_walkable:
      description: Returns True if tile can be walked on (no wall).
      returns:
        type: bool
    get_move_cost:
      description: Returns movement cost for this tile (floor only if walkable).
      returns:
        type: int | float
    get_sight_cost:
      description: Returns sight cost for this tile (floor + wall modifiers).
      returns:
        type: int
    get_accuracy_mod:
      description: Returns accuracy modifier for this tile (floor + wall).
      returns:
        type: int
    get_armor:
      description: Returns total armor for this tile (floor + wall).
      returns:
        type: int
    is_light_source:
      description: Returns True if any component is a light source.
      returns:
        type: bool
    destroy_floor:
      description: Destroys the floor and replaces it if needed.
      returns:
        type: str | None
    destroy_wall:
      description: Destroys the wall and replaces it if needed.
      returns:
        type: str | None
    destroy_object:
      description: Destroys an object and replaces it if needed.
      args:
        obj:
          type: TBattleObject
      returns:
        type: str | None
    apply_damage:
      description: Apply damage to this tile (point or area).
    apply_point_damage:
      description: Apply direct damage to this tile and its contents.
    apply_area_damage:
      description: Apply area damage starting from this tile, propagating outward.
    calculate_resistance:
      description: Calculate resistance modifier for an object/armor vs. damage type.
      returns:
        type: float
    distribute_damage:
      description: Split damage into HURT/STUN based on damage model.
      returns:
        type: tuple
    gid_to_tileset_name:
      description: Convert a global tile ID (gid) to a string in the format 'XXX_YYY'.
      returns:
        type: str | None
    from_gids:
      description: Create a TBattleTile from GIDs and used_tilesets info.
      returns:
        type: TBattleTile

TMapBlockEntry:
  description: |
    Represents a map block entry in a terrain definition. Each entry describes a block's map name, size, group, chance, items, units, and visibility.
  constructor:
    data:
      type: dict
      description: Dictionary with keys: map (str), size (int), group (int), chance (int), items (dict), units (dict), show (bool).

TTerrain:
  description: |
    Represents a terrain type for battle map generation. Each terrain has a list of map block entries, a map script, and loads TMX map files for use in map generation.
  constructor:
    pid:
      type: str
      description: Terrain identifier.
    data:
      type: dict
      description: Dictionary with terrain properties (name, description, tileset, script, maps_folder, units_civilian, map_blocks).

TBattleScript:
  description: |
    Represents a script for map block placement. Used to generate a battle map from map blocks in a specific way (by group, size, etc). Each script consists of steps, each step describes how to fill part of the map grid.
  constructor:
    pid:
      type: str
      description: Script identifier.
    data:
      type: dict
      description: Dictionary with script properties (steps: list of step dicts).

TBattleScriptStep:
  description: |
    Represents a single step in a map generation script. Each step defines an action to take when building the battle map.
  constructor:
    data:
      type: dict
      description: Dictionary with step properties (type, group, size, runs, chance, direction, row, col, ufo, craft, label, condition).

TBattleGenerator:
  description: |
    Generates a battle map using terrain's map blocks and map script. Follows the XCOM/OpenXcom map generation approach using map blocks and scripts.
  constructor:
    terrain:
      type: TTerrain
      description: The terrain object containing map blocks and settings.
    script:
      type: TBattleScript | None
      description: The map script that defines how to assemble the map (optional).
    blocks_x:
      type: int
      description: Number of map blocks horizontally (default 4, min 4, max 7).
    blocks_y:
      type: int
      description: Number of map blocks vertically (default 4, min 4, max 7).

TDeployment:
  description: |
    Represents a deployment for a battle, loaded from TOML. Contains a list of TDeploymentGroup and civilian info.
  constructor:
    pid:
      type: str
      description: Deployment identifier.
    data:
      type: dict
      description: Dictionary with deployment properties (effect, civilians, units: list of group dicts).
    terrain_civilian_types:
      type: list | None
      description: List of civilian unit types for the terrain (optional).

TDeploymentGroup:
  description: |
    Represents a group of similar units in a deployment, loaded from TOML. Supports weights for each unit, min/max qty, and inside/outside UFO chance.
  constructor:
    data:
      type: dict
      description: Dictionary with group properties (qty_low, qty_high, units, outside_ufo, inside_ufo, leader, patrol, guard).

TManufacture:
  description: |
    Manages a collection of manufacturing projects (TManufactureEntry). Provides methods to load, filter, and check availability of manufacturing projects.
  constructor:
    data:
      type: dict | None
      description: Dictionary containing manufacturing data (parsed from TOML).
  attributes:
    entries:
      type: dict
      description: Dictionary of project_id -> TManufactureEntry
  methods:
    load:
      description: Load manufacturing data from a dictionary (parsed from TOML).
      args:
        data:
          type: dict
          description: Dictionary containing manufacturing data.
    get_entry:
      description: Get a specific manufacturing entry by project_id.
      args:
        project_id:
          type: str
          description: ID of the manufacturing project to retrieve.
      returns:
        type: TManufactureEntry | None
        description: The entry if found, else None.
    get_projects_by_category:
      description: Get manufacturing projects filtered by a specific category.
      args:
        category:
          type: str
          description: Type of manufacturing projects to filter by.
      returns:
        type: list
        description: List of manufacturing entries matching the category.
    get_available_projects:
      description: Get list of manufacturing projects that are available based on requirements.
      args:
        available_technologies:
          type: list | None
          description: List of researched technologies.
        available_services:
          type: list | None
          description: List of services available in the base.
        available_items:
          type: dict | None
          description: Dictionary of items in storage with quantities.
      returns:
        type: list
        description: List of available manufacturing projects (TManufactureEntry).

TManufactureEntry:
  description: |
    Represents a manufacturing entry (project) that can be manufactured. Stores all data and requirements for a manufacturing project.
  constructor:
    pid:
      type: str
      description: Project ID.
    data:
      type: dict | None
      description: Data for the entry.
  attributes:
    name:
      type: str
      description: Name of the project.
    category:
      type: str
      description: Category of the project.
    build_time:
      type: int
      description: Time required to build.
    build_cost:
      type: int
      description: Cost to build.
    give_score:
      type: int
      description: Score given on completion.
    tech_start:
      type: list
      description: Technologies required to start.
    items_needed:
      type: dict
      description: Items required to manufacture.
    services_needed:
      type: list
      description: Services required to manufacture.
    region_needed:
      type: list
      description: Required regions.
    country_needed:
      type: list
      description: Required countries.
    items_build:
      type: any
      description: Items produced.
    units_build:
      type: any
      description: Units produced.
    crafts_build:
      type: any
      description: Crafts produced.

PurchaseOrder:
  description: |
    Represents a purchase order made by the player. Handles items, units, and crafts to be purchased, their quantities, and order status.
  constructor:
    order_id:
      type: str
      description: Unique order identifier.
    base_id:
      type: str
      description: Base where the order is placed.
    items:
      type: dict | None
      description: Items to purchase.
    units:
      type: dict | None
      description: Units to purchase.
    crafts:
      type: dict | None
      description: Crafts to purchase.
  attributes:
    id:
      type: str
      description: Order ID.
    base_id:
      type: str
      description: Base where the order is placed.
    items:
      type: dict
      description: Items to purchase {item_id: quantity}.
    units:
      type: dict
      description: Units to purchase {unit_id: quantity}.
    crafts:
      type: dict
      description: Crafts to purchase {craft_id: quantity}.
    status:
      type: str
      description: Order status ('ordered', 'processed', 'cancelled').
  methods:
    is_empty:
      description: Check if the order is empty (no items, units, or crafts).
      returns:
        type: bool
        description: True if empty, False otherwise.
    mark_processed:
      description: Mark the order as processed.
    mark_cancelled:
      description: Mark the order as cancelled.
    calculate_total_cost:
      description: Calculates the total cost of the purchase order using provided lookup functions.
      args:
        item_cost_lookup:
          type: callable
          description: Function to get item cost by id.
        unit_cost_lookup:
          type: callable
          description: Function to get unit cost by id.
        craft_cost_lookup:
          type: callable
          description: Function to get craft cost by id.
      returns:
        type: int
        description: Total cost of the order.

TAnimation:
  description: Manages visual animations in both tactical and strategic views. Controls unit movements, weapon effects, explosions, and other visual effects.
  constructor: {}
  attributes:
    animations:
      type: list
      description: List of currently running animations.
  methods:
    play_animation:
      description: Play a specific animation on a target.
    stop_animation:
      description: Stop a running animation by its ID.
    update:
      description: Update all running animations by delta time.
    clear:
      description: Remove all running animations (e.g., on scene change).

TDifficulty:
  description: Controls game difficulty settings. Adjusts AI behavior, alien research progress, funding, and other parameters.
  constructor:
    level:
      type: str
      description: Initial difficulty level (default 'Normal').
  attributes:
    level:
      type: str
      description: Current difficulty level.
    modifiers:
      type: dict
      description: Gameplay modifiers for the current difficulty.
  methods:
    set_level:
      description: Set the difficulty level.
    get_modifier:
      description: Get a specific modifier for the current difficulty.
    apply_modifiers:
      description: Apply difficulty modifiers to the game state.

TSaveGame:
  description: Handles saving and loading game state. Manages serialization of all game objects and state.
  constructor:
    save_path:
      type: str
      description: Path to the save file (optional).
  attributes:
    save_path:
      type: str
      description: Path to the save file.
    last_saved:
      type: any
      description: Timestamp of the last save.
  methods:
    save:
      description: Save the current game state to disk.
    load:
      description: Load a game state from disk.
    get_save_metadata:
      description: Return metadata about the save file.

TSoundManager:
  description: Manages all game sounds and music. Handles ambient sounds, battle effects, and UI feedback.
  constructor: {}
  attributes:
    sounds:
      type: dict
      description: Dictionary of loaded sound effects.
    music_tracks:
      type: list
      description: List of available music tracks.
  methods:
    play_sound:
      description: Play a specific sound effect.
    play_music:
      description: Play a music track.
    stop_all:
      description: Stop all currently playing sounds and music.
    load_sounds:
      description: Load all required sound assets.

TStatistics:
  description: Tracks player performance metrics across the campaign. Records kills, mission success rates, and achievements.
  constructor: {}
  attributes:
    kills:
      type: int
      description: Total number of kills by player units.
    missions_completed:
      type: int
      description: Number of missions successfully completed.
    missions_failed:
      type: int
      description: Number of missions failed.
    achievements:
      type: list
      description: List of unlocked achievements.
  methods:
    record_kill:
      description: Record a kill by a unit.
    record_mission_result:
      description: Record the result of a mission.
    add_achievement:
      description: Add a new achievement.
    get_summary:
      description: Return a summary of statistics.

TGame:
  description: Main game class (singleton). Holds all game data, including world map, campaigns, calendar, budget, research, mod data, and bases.
  constructor: {}
  attributes:
    worldmap:
      type: TWorld
      description: World map object (tiles, countries, regions, biomes, locations).
    campaigns:
      type: list
      description: List of current campaigns.
    calendar:
      type: TCalendar
      description: Calendar for date, turn, and event triggers.
    budget:
      type: int
      description: XCOM budget.
    funding:
      type: int
      description: XCOM funding.
    scoring:
      type: int
      description: XCOM scoring.
    research_tree:
      type: TResearchTree
      description: Global research tree.
    mod:
      type: TMod
      description: Loaded mod data (e.g., item stats).
    bases:
      type: dict
      description: Dictionary of bases (name: TBaseXCom).
    current_base_name:
      type: str
      description: Name of the currently active base.
    base_labels:
      type: dict
      description: Mapping of base labels/names.
  methods:
    get_active_base:
      description: Get the currently active base.
    set_active_base:
      description: Set a base as the active base.
    set_active_base_by_index:
      description: Set a base as the active base using its index.
    add_base:
      description: Add a new base to the game.
    remove_base:
      description: Remove a base from the game.
    base_exists:
      description: Check if a base exists.
    get_base_status:
      description: Get the status of a base by name.
    get_base_status_by_index:
      description: Get the status of a base by index.
    get_current_base_units:
      description: Get units for the currently active base.
    get_current_base_items:
      description: Get items for the currently active base.
    get_current_base_crafts:
      description: Get craft vehicles for the currently active base.
    get_base_summary:
      description: Get summary statistics for the current active base.
    initialize_starting_bases:
      description: Initialize the starting bases for a new game based on the mod configuration.

TModLoader:
  description: Loads and merges all YAML files from a mod's rules directory, building a unified dictionary (yaml_data) for use by TMod and the game engine.
  constructor:
    mod_name:
      type: str
      description: Name of the mod being loaded.
    mod_path:
      type: str | Path
      description: Path to the mod directory.
  attributes:
    mod_name:
      type: str
      description: Name of the mod being loaded.
    mod_path:
      type: Path
      description: Path to the mod directory.
    yaml_data:
      type: dict
      description: Parsed and merged data from all YAML files.
  methods:
    load_all_yaml_files:
      description: Load and merge all YAML files from the rules directory in the mod folder.

TItem:
  description: |
    Base class for all game items. Encapsulates common properties and behaviors for item instances that can be stored in inventories, equipped by units, etc.
  constructor:
    item_type_id:
      type: str
      description: ID of the item's type definition to use for static parameters.
    item_id:
      type: str | None
      description: Unique identifier for this item instance (generated if not provided).

TItemArmour:
  description: |
    Represents an armour item assigned to a unit. Manages shield, regeneration, and resistance.
  constructor:
    item_type_id:
      type: str
      description: ID of the armour type to use.
    item_id:
      type: str | None
      description: Unique identifier for this armour item (generated if not provided).

TItemWeapon:
  description: |
    Represents a weapon item assigned to a unit. Tracks ammo, firing mode, and calculates effective parameters.
  constructor:
    item_type_id:
      type: str
      description: ID of the weapon type to use.
    item_id:
      type: str | None
      description: Unique identifier for this weapon item (generated if not provided).

TCraftItem:
  description: |
    Represents a craft-specific item (e.g., vehicle weapon). Manages ammo, maintenance, and hardpoint compatibility.
  constructor:
    item_type_id:
      type: str
      description: ID of the craft item type to use.
    item_id:
      type: str | None
      description: Unique identifier for this craft item (generated if not provided).

TItemType:
  description: |
    Base item type definition that stores static parameters for all types of items. Serves as the central reference for all item characteristics and parameters.
  constructor:
    pid:
      type: str
      description: Unique item type identifier.
    data:
      type: dict
      description: Dictionary with item type properties (name, category, weight, stats, etc).
    mode_defs:
      type: dict | None
      description: Optional dictionary of weapon mode definitions.

TWeaponMode:
  description: |
    Represents a specific firing/usage mode for weapons. Defines modifiers for accuracy, damage, range, AP cost, and shot count.
  constructor:
    pid:
      type: str
      description: Mode identifier.
    data:
      type: dict
      description: Dictionary with mode properties (name, key, ap_cost_modifier, range_modifier, accuracy_modifier, shots, damage_modifier).

TItemTransferManager:
  description: |
    Manages the transfer of items between inventory slots. Handles drag-and-drop, compatibility checks, swap logic, and undo/redo history.
  constructor:
    validate_slot_compatibility:
      type: callable | None
      description: Optional function to check if an item can be placed in a slot. Should take (item, slot) and return True if compatible.

TLocation:
  description: Base class for all world map locations (city, site, UFO, etc).
  constructor:
    loc_id:
      type: str
      description: Unique identifier for the location.
    data:
      type: dict | None
      description: Dictionary with location attributes.

TCity:
  description: Represents a city on the world map as a location.
  constructor:
    loc_id:
      type: str
      description: Unique identifier for the city location.
    data:
      type: dict | None
      description: Dictionary with city attributes (size, name, description, terrains).
  attributes:
    size:
      type: int
      description: Size of the city (default 4).
    name:
      type: str
      description: Name of the city.
    description:
      type: str
      description: Description of the city.
    terrains:
      type: dict | list
      description: Terrain types available in the city, with weights if dict.

TSite:
  description: Represents a static mission site (not a UFO or base) on the world map.
  constructor:
    loc_id:
      type: str
      description: Unique identifier for the site location.
    data:
      type: dict
      description: Dictionary with site attributes (site_type, etc.).
  attributes:
    site_type:
      type: TSiteType
      description: Type of the site, determines appearance and tactical configuration.
    map_blocks:
      type: dict
      description: Tactical map blocks for the mission.
    game:
      type: TGame
      description: Reference to the game instance.

TSiteType:
  description: Defines the type and parameters for a mission site.
  constructor:
    pid:
      type: str
      description: Unique identifier for the site type.
    data:
      type: dict
      description: Dictionary with site type attributes.
  attributes:
    name:
      type: str
      description: Name of the site type.
    pedia:
      type: str
      description: Encyclopedia entry or description.
    marker:
      type: str
      description: Image marker for geoscape visualization.
    size:
      type: int
      description: Size of the site type (default 1).
    map_blocks:
      type: dict
      description: Tactical map block configuration.
    deployment:
      type: any
      description: Deployment information for enemy units.

TUfo:
  description: Represents a UFO on the world map, with movement and combat logic.
  constructor:
    ufo_id:
      type: str
      description: Unique identifier for the UFO.
    data:
      type: dict
      description: Dictionary with UFO attributes (type, script, position, etc.).
  attributes:
    position:
      type: tuple
      description: Current (x, y) position on the world map.
    ufo_type:
      type: TUfoType
      description: Reference to TUfoType instance.
    ufo_script:
      type: TUfoScript
      description: Reference to TUfoScript instance.
    script_step:
      type: int
      description: Current step in the UFO's script.
    speed:
      type: int
      description: Current speed.
    speed_max:
      type: int
      description: Maximum speed from ufo_type.
    health:
      type: int
      description: Current health.
    game:
      type: TGame
      description: Reference to the game instance.

TUfoScript:
  description: Defines a scripted trajectory and behavior sequence for UFOs.
  constructor:
    pid:
      type: str
      description: Unique identifier for the script.
    data:
      type: dict
      description: Dictionary with script attributes (name, desc, steps).
  attributes:
    name:
      type: str
      description: Name of the script.
    description:
      type: str
      description: Description of the script.
    steps:
      type: list
      description: List of step dictionaries defining the script.

TUfoType:
  description: Defines the specifications and capabilities of a specific UFO class.
  constructor:
    pid:
      type: str
      description: Unique identifier for the UFO type.
    data:
      type: dict
      description: Dictionary with UFO type attributes.
  attributes:
    name:
      type: str
      description: Name of the UFO type.
    pedia:
      type: str
      description: Encyclopedia entry or description.
    vessel:
      type: str
      description: Image during dogfight.
    marker:
      type: str
      description: Image marker for geoscape visualization.
    size:
      type: int
      description: Size of the UFO (default 1).
    health:
      type: int
      description: Maximum health.
    speed:
      type: int
      description: Maximum speed.
    shield:
      type: int
      description: Shield value.
    shield_regen:
      type: int
      description: Shield regeneration per turn.
    damage:
      type: int
      description: Weapon damage.
    rate:
      type: int
      description: Weapon fire rate.
    range:
      type: int
      description: Weapon range.
    accuracy:
      type: float
      description: Weapon accuracy.
    fire_sound:
      type: str
      description: Sound played when firing.
    radar_range:
      type: int
      description: Radar detection range.
    radar_power:
      type: int
      description: Radar detection power.
    radar_cover:
      type: int
      description: Radar cover value.
    radar_cover_change:
      type: int
      description: Radar cover change per turn.
    is_hunter:
      type: bool
      description: Whether the UFO hunts player craft.
    hunt_bravery:
      type: float
      description: Aggressiveness in hunting.
    bombard_power:
      type: int
      description: Bombardment power.
    score_complete:
      type: int
      description: Score for completing mission.
    score_destroy:
      type: int
      description: Score for destroying UFO.
    score_avoid:
      type: int
      description: Score for avoiding UFO.
    score_damage:
      type: int
      description: Score for damaging UFO.
    score_turn:
      type: int
      description: Score per turn.
    map_block:
      type: str
      description: Map block for tactical battle.
    map_width:
      type: int
      description: Map width for tactical battle.
    map_height:
      type: int
      description: Map height for tactical battle.
    force_terrain:
      type: list
      description: Forced terrain types.
    deployments:
      type: dict
      description: Alien units that can appear in this UFO.

TCalendar:
  description: |
    Manages the in-game calendar, campaign scheduling, and event checks. Handles date progression, campaign generation, and triggers for daily, weekly, monthly, quarterly, and yearly events.
  constructor:
    data:
      type: dict | None
      description: Dictionary with campaign step data per month (e.g., {"m01": {...}, ...}). Optional.
  attributes:
    year:
      type: int
      description: Current year in the game.
    month:
      type: int
      description: Current month (1-12).
    day:
      type: int
      description: Current day (1-30).
    total_days:
      type: int
      description: Total days elapsed since start.
    campaign_months:
      type: dict
      description: Campaign rules for each month (month number: TCampaignStep).
  methods:
    set_start_date:
      description: Set the starting date for the calendar.
      args:
        year:
          type: int
          description: Start year.
        month:
          type: int
          description: Start month (1-12).
        day:
          type: int
          description: Start day (1-30).
    get_date:
      description: Get the current date.
      returns:
        type: tuple
        description: (year, month, day)
    advance_days:
      description: Advance the game by n days, performing all checks (daily, weekly, monthly, quarterly, yearly).
      args:
        n:
          type: int
          description: Number of days to advance.
    generate_monthly_campaigns:
      description: Generate campaigns for the given month based on campaign_months data.
      args:
        month:
          type: int
          description: Month number.
        research_status:
          type: callable
          description: Function or set to check if tech is researched.
        all_campaigns:
          type: list
          description: List of TCampaign.
        all_factions:
          type: list
          description: List of TFaction.
        worldmap:
          type: object
          description: Reference to world map for region/tile selection.
      returns:
        type: list
        description: Campaign instances to start this month.
    daily_campaign_check:
      description: Check all active campaigns and their missions, create locations if timer/date fits.
      args:
        current_day:
          type: int
          description: Current day in the calendar.
        active_campaigns:
          type: list
          description: Campaign instances generated by generate_monthly_campaigns.
        worldmap:
          type: object
          description: Reference to world map for location creation.

TCampaign:
  description: |
    Represents a set of missions for a specific faction in a specific region. Created by the calendar, it has a start date, end date, and list of missions, limited by research status. Has a goal to achieve, when the alien will score points.
  constructor:
    pid:
      type: str
      description: Campaign identifier.
    data:
      type: dict
      description: Campaign data (name, score, objective, faction, tech_start, tech_end, regions, missions).
  attributes:
    pid:
      type: str
      description: Campaign identifier.
    name:
      type: str
      description: Campaign name.
    score:
      type: int
      description: Points awarded for campaign completion.
    objective:
      type: int
      description: Campaign objective type.
    faction:
      type: str
      description: Faction name.
    tech_start:
      type: list
      description: Technologies required to start.
    tech_end:
      type: list
      description: Technologies that end the campaign.
    regions:
      type: dict
      description: Region weights for campaign occurrence.
    missions:
      type: list
      description: List of TMission objects.

TCampaignStep:
  description: Mission generation rules for a specific game month. Defines how many campaigns/events are generated and their weights for a given month.
  constructor:
    month:
      type: int
      description: Month number (1-based).
    data:
      type: dict
      description: Dictionary with possible keys:
        qty_min (int): Minimum number of campaigns/events.
        qty_max (int): Maximum number of campaigns/events.
        events (int): Total number of events in this month.
        weights (dict): Arc weights for random selection (faction or event type -> weight).
  attributes:
    month:
      type: int
      description: Month number (1-based).
    qty_min:
      type: int
      description: Minimum number of campaigns/events to generate.
    qty_max:
      type: int
      description: Maximum number of campaigns/events to generate.
    events:
      type: int
      description: Total number of events in this month.
    weights:
      type: dict
      description: Arc weights for random selection (faction or event type -> weight).

QuestManager:
  description: |
    Tracks quest and organization progress, unlocks new content, and provides progress metrics.
  constructor:
    quests_data:
      type: dict
      description: Quest data keyed by quest key.
    orgs_data:
      type: dict
      description: Organization data keyed by org key.
    completed_techs:
      type: list | set | None
      description: Completed technologies (optional).
  attributes:
    quests:
      type: dict
      description: All quests by key.
    organizations:
      type: dict
      description: All organizations by key.
    completed_techs:
      type: set
      description: Set of completed technologies.
    completed_quests:
      type: set
      description: Set of completed quests.
  methods:
    update_quests:
      description: Update quest completion status based on completed quests and techs.
    update_organizations:
      description: Update organization unlock status based on completed quests and techs.
    get_progress:
      description: Get progress metrics (completed value, total value, percent complete).
    unlock_new_content:
      description: Update quests and organizations to unlock new content.
    get_unlocked_organizations:
      description: Return a list of unlocked organizations.
    get_locked_organizations:
      description: Return a list of locked organizations.

TRace:
  description: Represents a race/type of unit and its basic stats, abilities, and AI behavior.
  constructor:
    pid:
      type: str
      description: Unique identifier for the race.
    data:
      type: dict
      description: Dictionary containing race attributes and stats.
  attributes:
    pid:
      type: str
      description: Race ID.
    name:
      type: str
      description: Display name.
    description:
      type: str
      description: Description of the race.
    sprite:
      type: str
      description: Sprite or image reference.
    is_big:
      type: bool
      description: Whether the unit is large-sized.
    is_mechanical:
      type: bool
      description: Whether the unit is mechanical.
    gain_experience:
      type: bool
      description: Whether the unit gains experience.
    health_regen:
      type: int
      description: Health regeneration per turn.
    sound_death:
      type: str | None
      description: Sound played on death.
    corpse_image:
      type: str | None
      description: Image for the corpse.
    stats:
      type: TUnitStats
      description: Base stats for the race.
    aggression:
      type: float
      description: AI aggression level.
    intelligence:
      type: float
      description: AI intelligence level.
    immune_panic:
      type: bool
      description: Immunity to panic.
    immune_pain:
      type: bool
      description: Immunity to pain.
    immune_bleed:
      type: bool
      description: Immunity to bleeding.
    can_run:
      type: bool
      description: Can the unit run?
    can_kneel:
      type: bool
      description: Can the unit kneel?
    can_sneak:
      type: bool
      description: Can the unit sneak?
    can_surrender:
      type: bool
      description: Can the unit surrender?
    can_capture:
      type: bool
      description: Can the unit be captured?
    spawn_on_death:
      type: str | None
      description: Unit spawned on death.
    avoids_fire:
      type: bool
      description: Avoids fire tiles.
    spotter:
      type: int
      description: Spotter role value.
    sniper:
      type: int
      description: Sniper role value.
    sell_cost:
      type: int
      description: Sell cost for the unit.
    female_frequency:
      type: float
      description: Frequency of female units.
    level_max:
      type: int
      description: Maximum level.
    level_train:
      type: int
      description: Training level.
    level_start:
      type: int
      description: Starting level.

TSide:
  description: Represents a faction or side in the game (e.g., player, alien, civilian). Used to define unit ownership, allegiance, and combat relationships.
  attributes:
    XCOM:
      type: int
      description: Player faction (0).
    ALIEN:
      type: int
      description: Alien faction (1).
    CIVILIAN:
      type: int
      description: Civilian faction (2).
    ALLIED:
      type: int
      description: Allied faction (3).
TTrait:
  description: Base class for all unit traits (promotions, wounds, effects, etc.), modifying stats and abilities.
  constructor:
    pid:
      type: str
      description: Unique identifier for the trait.
    data:
      type: dict
      description: Dictionary containing trait attributes and stat modifications.
  attributes:
    id:
      type: str
      description: Trait ID.
    name:
      type: str
      description: Display name.
    sprite:
      type: str
      description: Sprite or image reference.
    description:
      type: str
      description: Description of the trait.
    type:
      type: int
      description: Trait type/category (promotion, wound, effect, etc.).
    stats:
      type: TUnitStats
      description: Stat modifications provided by the trait.
    cost:
      type: int
      description: Cost to acquire the trait.
    items_needed:
      type: list
      description: Items required to acquire the trait.
    races:
      type: list
      description: Races eligible for the trait.
    min_level:
      type: int
      description: Minimum level required.
    max_level:
      type: int
      description: Maximum level allowed.
    services_needed:
      type: list
      description: Required services for the trait.
    tech_needed:
      type: list
      description: Technologies required to unlock.
    recovery_time:
      type: int
      description: Recovery time (for transformations).
    transfer_time:
      type: int
      description: Transfer time (for transformations).
    battle_duration:
      type: int
      description: Duration of battle effect.
    battle_effect:
      type: any
      description: Effect applied in battle.
    battle_chance_complete:
      type: int
      description: Chance to complete effect in battle.
    battle_only:
      type: bool
      description: Whether the trait is battle-only.
  methods:
    get_stat_modifiers:
      description: Returns a dictionary of stat modifiers provided by this trait.

TUnit:
  description: Represents an individual unit in the game with all its attributes and capabilities. Handles stats, equipment, traits, and status for gameplay.
  constructor:
    unit_type:
      type: TUnitType
      description: The unit type template.
    side_id:
      type: int
      description: Faction/side identifier.
  attributes:
    game:
      type: TGame
      description: Reference to the game instance.
    unit_type:
      type: TUnitType
      description: Unit type template.
    side_id:
      type: int
      description: Faction/side identifier.
    name:
      type: str
      description: Unit name.
    nationality:
      type: str
      description: Nationality string.
    face:
      type: str
      description: Face/sprite reference.
    female:
      type: bool
      description: Gender flag.
    stats:
      type: TUnitStats
      description: Unit stats.
    race:
      type: TRace
      description: Racial template.
    traits:
      type: list[TTrait]
      description: List of traits.
    inventory_manager:
      type: TUnitInventoryManager
      description: Equipment manager.
    inventory:
      type: list
      description: List of equipped items.
    position:
      type: any
      description: Map position.
    direction:
      type: any
      description: Facing direction.
    alive:
      type: bool
      description: Alive status.
    dead:
      type: bool
      description: Dead status.
    mind_controlled:
      type: bool
      description: Mind control status.
    panicked:
      type: bool
      description: Panic status.
    crazy:
      type: bool
      description: Insanity status.
    stunned:
      type: bool
      description: Stun status.
    kneeling:
      type: bool
      description: Kneeling status.
    running:
      type: bool
      description: Running status.
  methods:
    armour:
      description: Get the unit's equipped armor.
    weapon:
      description: Get the unit's primary weapon.
    equipment:
      description: Get all equipped items as a list.
    calculate_stats:
      description: Calculate the unit's stats, applying traits and equipment modifiers.

TUnitInventoryManager:
  description: Unified inventory manager for a single unit. Handles slot logic, stat modification, template save/load, dynamic slot availability, and auto-equip.
  constructor:
    unit:
      type: TUnit | None
      description: The unit this manager is attached to.
  attributes:
    unit:
      type: TUnit
      description: The unit instance.
    equipment_slots:
      type: dict
      description: Mapping of slot names to equipped items.
    slot_types:
      type: dict
      description: Mapping of slot names to item categories.
    available_slots:
      type: set
      description: Set of currently available slot names.
    stat_modifiers:
      type: dict
      description: Stat modifiers per slot.
    _template:
      type: dict | None
      description: Last saved template.
    _named_templates:
      type: dict
      description: Named templates for quick load/save.
  methods:
    equip_item:
      description: Equip an item to a specified slot.
    unequip_item:
      description: Unequip an item from a specified slot.
    get_total_weight:
      description: Get the total weight of equipped items.
    get_available_slots:
      description: Get a list of currently available slot names.
    save_template:
      description: Save the current equipment configuration as a template.
    load_template:
      description: Load an equipment configuration from a template.
    save_named_template:
      description: Save a named equipment template.
    load_named_template:
      description: Load a named equipment template.
    list_templates:
      description: List all saved template names.
    clear_all:
      description: Unequip all items and reset slots.
    get_all_items:
      description: Get all equipped items as a list.
    to_dict:
      description: Serialize the inventory manager to a dictionary.
    from_dict:
      description: Create an inventory manager from a dictionary.
    auto_equip:
      description: Automatically equip an item in the first available slot of appropriate type.

TUnitStats:
  description: Represents a unit's stats and provides methods to manage them during the game.
  constructor:
    data:
      type: dict | None
      description: Dictionary of stat values. Defaults to None.
  attributes:
    health:
      type: int
      description: Max health.
    speed:
      type: int
      description: Speed stat.
    strength:
      type: int
      description: Strength stat.
    energy:
      type: int
      description: Max energy.
    aim:
      type: int
      description: Aim stat.
    melee:
      type: int
      description: Melee stat.
    reflex:
      type: int
      description: Reflex stat.
    psi:
      type: int
      description: Psi stat.
    bravery:
      type: int
      description: Bravery stat.
    sanity:
      type: int
      description: Sanity stat.
    sight:
      type: tuple
      description: (day, night) sight range.
    sense:
      type: tuple
      description: (day, night) sense range.
    cover:
      type: tuple
      description: (day, night) cover value.
    morale:
      type: int
      description: Max morale.
    action_points:
      type: int
      description: Max action points.
    size:
      type: int
      description: Unit size.
    action_points_left:
      type: int
      description: Current action points.
    energy_left:
      type: int
      description: Current energy.
    hurt:
      type: int
      description: Current damage.
    stun:
      type: int
      description: Current stun damage.
    morale_left:
      type: int
      description: Current morale.
  methods:
    receive_damage:
      description: Apply hurt damage and return (dead, unconscious).
    receive_stun:
      description: Apply stun damage and return unconscious status.
    restore_health:
      description: Restore health by a given amount.
    restore_stun:
      description: Restore stun by a given amount.
    restore_energy:
      description: Restore energy by a given amount.
    restore_morale:
      description: Restore morale by a given amount.
    use_ap:
      description: Use a given amount of action points.
    new_game:
      description: Reset stats for a new game.
    new_turn:
      description: Reset stats for a new turn.
    action_rest:
      description: Rest action to restore some stats.
    get_effective_ap:
      description: Get effective action points for the turn, reduced by low morale or sanity.
    is_alive:
      description: Check if the unit is alive.
    is_conscious:
      description: Check if the unit is conscious.
    is_panicked:
      description: Check if the unit is panicked.
    is_crazy:
      description: Check if the unit is crazy.
    get_sight:
      description: Get sight range for day or night.
    get_health_left:
      description: Get remaining health.
    get_stun_left:
      description: Get remaining stun.
    __add__:
      description: Add two TUnitStats objects.
    sum_with:
      description: Sum this object's stats with another TUnitStats and update self.
    __repr__:
      description: String representation of TUnitStats.

TUnitType:
  description: Represents a type/template of unit with stats, race, traits, and equipment. Used as a template for creating units in the game.
  constructor:
    pid:
      type: str
      description: Unique identifier for the unit type.
    data:
      type: dict
      description: Dictionary containing unit type attributes and configuration.
  attributes:
    pid:
      type: str
      description: Unit type ID.
    name:
      type: str
      description: Display name.
    race:
      type: str
      description: Race identifier.
    sprite:
      type: str
      description: Sprite or image reference.
    rank:
      type: int
      description: Rank value.
    traits:
      type: list
      description: List of trait identifiers.
    armour:
      type: any
      description: Armour configuration.
    primary:
      type: any
      description: Primary weapon configuration.
    secondary:
      type: any
      description: Secondary weapon configuration.
    score_dead:
      type: int
      description: Score for killing this unit.
    score_alive:
      type: int
      description: Score for capturing this unit alive.
    items_dead:
      type: list
      description: Items dropped on death.
    items_alive:
      type: list
      description: Items dropped if alive.
    ai_ignore:
      type: bool
      description: AI ignore flag.
    vip:
      type: bool
      description: VIP flag.
    drop_items:
      type: bool
      description: Drop items on death flag.
    drop_armour:
      type: bool
      description: Drop armour on death flag.
  methods:
    create_unit_from_template:
      description: Create a unit instance based on this type.

TPedia:
  description: Main container for the UFOpedia system. Manages and provides access to all pedia entries, categories, and navigation logic.
  constructor:
    entries:
      type: dict
      description: Dictionary of pedia entries (pid -> TPediaEntry). Optional.
    categories:
      type: dict
      description: Dictionary of entry types (type id -> TPediaEntryType). Optional.
  methods:
    add_entry:
      description: Add a new pedia entry.
      args:
        entry:
          type: TPediaEntry
          description: The entry to add.
    get_entry:
      description: Retrieve a pedia entry by its pid.
      args:
        pid:
          type: str
          description: Entry identifier.
      returns:
        type: TPediaEntry | None
        description: The entry if found, else None.
    list_entries_by_type:
      description: List all entries of a given type/category.
      args:
        type_id:
          type: int
          description: The type/category id.
      returns:
        type: list
        description: List of TPediaEntry objects.
    add_category:
      description: Add a new entry type/category.
      args:
        category:
          type: TPediaEntryType
          description: The category to add.
    get_category:
      description: Retrieve a category/type by its id.
      args:
        type_id:
          type: int
          description: The type/category id.
      returns:
        type: TPediaEntryType | None
        description: The category if found, else None.

TPediaEntry:
  description: Represents a single entry in the UFOpedia. Stores all relevant data, such as type, name, description, sprite, and related stats.
  constructor:
    pid:
      type: str
      description: Unique identifier for the entry.
    data:
      type: dict
      description: Dictionary containing entry data and metadata (type, name, section, description, sprite, tech_needed, order, related, stats).
  methods:
    is_unlocked:
      description: Check if the entry is unlocked based on available technologies.
      args:
        unlocked_techs:
          type: list
          description: List of unlocked technology names/IDs.
      returns:
        type: bool
        description: True if all required techs are unlocked, else False.

TPediaEntryType:
  description: Represents a type/category of pedia entry. Used for categorizing and managing pedia entries by type.
  constructor:
    type_id:
      type: int
      description: Unique identifier for the entry type/category.
    name:
      type: str
      description: Display name for the category.
    description:
      type: str
      description: Description of the category/type. Optional.
    icon:
      type: str
      description: Icon or sprite reference for the category. Optional.
    order:
      type: int
      description: Display order for the category. Optional.

# --- GUI Base Screen Classes ---

TGuiBaseTopPanel:
  description: |
    Widget for managing the top navigation panel of the XCOM inventory interface. Provides screen switching, base selection, and displays current base, date, and funds.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the panel.

TGuiBarracks:
  description: |
    Implements the barracks management screen with unit roster, equipment loadouts, and inventory functionality. Provides the main interface for managing units, their equipment, loadout templates, and stats in the base barracks.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiHangar:
  description: |
    Hangar screen for craft management. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiStorage:
  description: |
    Storage screen for base storage management. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiTransfer:
  description: |
    Transfer screen for inter-base transfers. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiPrison:
  description: |
    Prison screen for containment. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiAcademy:
  description: |
    Academy screen for manufacturing and training. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiWorkshop:
  description: |
    Workshop screen for manufacturing. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiLab:
  description: |
    Laboratory screen for science and research. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiMarket:
  description: |
    Market screen for purchases. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiArchive:
  description: |
    Archive screen for research and records. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiBaseInfo:
  description: |
    Base info summary screen for base activities. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

TGuiFacility:
  description: |
    Facility screen for manufacturing and base facilities. Inherits from TGuiCoreScreen.
  constructor:
    parent:
      type: QWidget (optional)
      description: Parent widget for the screen.

# --- End GUI Base Screen Classes ---

TFacility:
  description: Represents a facility instance in an XCOM base. Tracks position, build progress, health, and links to facility type blueprint.
  constructor:
    facility_name:
      type: str
      description: Facility type ID or name.
    position:
      type: tuple | None
      description: (x, y) grid position in base (optional).
TFacilityType:
  description: Represents a facility type blueprint for XCOM bases. Holds all stats, requirements, and properties for a facility, loaded from TOML or YAML.
  constructor:
    pid:
      type: str
      description: Unique facility type ID.
    data:
      type: dict
      description: Dictionary with facility properties (from TOML/YAML).
TBaseXComBattleGenerator:
  description: Generates a battle map layout for an XCOM base based on its facilities. Converts base facility layout into a 2D map block array for tactical battles.
  constructor:
    base:
      type: TBaseXCom
      description: The base object with facilities and positions.

TBattleFloor:
  description: |
    Represents a floor on the battle map. It is walkable and may affect movement, sight, and accuracy.
  constructor:
    move_cost:
      type: int
      description: Movement cost for units (default 1).
    sight_cost:
      type: int
      description: Additional sight cost (affects LOS, default 0).
    accuracy_cost:
      type: int
      description: Penalty/bonus to accuracy (cover, default 0).
    armor:
      type: int
      description: How much damage it can take before being destroyed (default 10).
    sound:
      type: str | None
      description: Sound to play when unit moves over (optional).
    is_light_source:
      type: bool
      description: Emits light? (default False).
    destroyed_floor_id:
      type: str | None
      description: Floor to replace with when destroyed (optional).
  methods:
    on_destroy:
      description: Returns id of replacement floor or None when destroyed.
      returns:
        type: str | None
        description: Replacement floor id or None.

TBattleObject:
  description: |
    Represents an object that may exist on a single tile. Can be picked up, thrown, destroyed, or emit light.
  constructor:
    is_light_source:
      type: bool
      description: Emits light? (default False).
    armor:
      type: int
      description: How much damage it can take before being destroyed (default 5).
    destroyed_object_id:
      type: str | None
      description: Object to replace with when destroyed (optional).
  methods:
    on_destroy:
      description: Returns id of replacement object or None when destroyed.
      returns:
        type: str | None
        description: Replacement object id or None.

TBattleRoof:
  description: |
    Represents a roof layer on a battle map tile. Used for visual and gameplay purposes (e.g., blocking light, providing cover). Placeholder for future attributes.
  constructor: {}

TBattleWall:
  description: |
    Represents a wall on the battle map. Walls are not walkable and are drawn on top of floors. Can block movement, sight, and fire, and may explode or emit light.
  constructor:
    block_sight:
      type: bool
      description: Does this wall block line of sight? (default True)
    block_fire:
      type: bool
      description: Does this wall block projectiles? (default True)
    sight_mod:
      type: int
      description: Modifier to sight (0=transparent, 100=opaque, default 100)
    fire_mod:
      type: int
      description: Modifier to fire (0=transparent, 100=blocks all, default 100)
    armor:
      type: int
      description: How much damage it can take (default 20)
    material:
      type: str
      description: Material type (affects resistances, default 'concrete')
    destroyed_wall_id:
      type: str | None
      description: Wall to replace with when destroyed (optional)
    is_light_source:
      type: bool
      description: Emits light? (default False)
    can_explode:
      type: bool
      description: Can explode on destruction? (default False)
    explosion_power:
      type: int
      description: Explosion power if explodes (default 0)
  methods:
    on_destroy:
      description: Returns id of replacement wall or None when destroyed.
      returns:
        type: str | None
        description: Replacement wall id or None.
